{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Whole Body Toolbox A Simulink Toolbox for Whole Body Control This toolbox allows non-programming experts and researchers approaching Whole Body Control to more easily develop controllers on either simulated or real YARP -based robotic platforms. Develop to deployment time is minimized by exploiting the rich variety of Simulink's toolboxes and its capabilities on rapid prototyping and visual debugging. Who use WB-Toolbox WB-Toolbox is used extensively in the controllers stored in robotology-playground/whole-body-controllers . This video shows the latest results on the iCub robot achieved in the EU project CoDyCo in which a top level controller implemented with the robotology/WB-Toolbox achieves a running 100 Hz rate. Citing this work Romano F., Traversaro S., Pucci D., Nori F. A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems Journal of Software Engineering for Robotics, 2017 Bibtex citation @ARTICLE{RomanoWBI17Journal, author={F. Romano and S. Traversaro and D. Pucci and F. Nori}, journal={Journal of Software Engineering for Robotics}, title={A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems}, year={2017}, }","title":"Home"},{"location":"#whole-body-toolbox","text":"","title":"Whole Body Toolbox"},{"location":"#a-simulink-toolbox-for-whole-body-control","text":"This toolbox allows non-programming experts and researchers approaching Whole Body Control to more easily develop controllers on either simulated or real YARP -based robotic platforms. Develop to deployment time is minimized by exploiting the rich variety of Simulink's toolboxes and its capabilities on rapid prototyping and visual debugging.","title":"A Simulink Toolbox for Whole Body Control"},{"location":"#who-use-wb-toolbox","text":"WB-Toolbox is used extensively in the controllers stored in robotology-playground/whole-body-controllers . This video shows the latest results on the iCub robot achieved in the EU project CoDyCo in which a top level controller implemented with the robotology/WB-Toolbox achieves a running 100 Hz rate.","title":"Who use WB-Toolbox"},{"location":"#citing-this-work","text":"Romano F., Traversaro S., Pucci D., Nori F. A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems Journal of Software Engineering for Robotics, 2017 Bibtex citation @ARTICLE{RomanoWBI17Journal, author={F. Romano and S. Traversaro and D. Pucci and F. Nori}, journal={Journal of Software Engineering for Robotics}, title={A Whole-Body Software Abstraction layer for Control Design of free-floating Mechanical Systems}, year={2017}, }","title":"Citing this work"},{"location":"Migration_from_WB-Toolbox_2.0/","text":"From WB-Toolbox 2.0 to WB-Toolbox 3.* Most of the major changes delivered with the 3.0 version of the WB-Toolbox don't affect directly the end-user. Under the hood the toolbox had an important polishing, and the small manual intervention required by this new release match the new features which have been developed. You can read Release Notes for a detailed overview. Below are described only the steps required to port Simulink models to this new release. New toolbox configuration The WB-Toolbox 2.0 was based on top of yarpWholeBodyInterface , which configuration was stored in a yarpWholeBodyInterface.ini file. This file was retrieved by ResourceFinder and its information was then loaded into the toolbox. Store the configuration in the Simulink model WB-Toolbox 3.0 deprecated the support of yarpWholeBodyInterface , and for reducing the complexity and sparsity of the information storage it allows configuring a Simulink model from the model itself. The new Configuration block allows inserting information such as Robot Name , URDF Name , Controlled Joints , ... directly from the block's mask. Load the configuration from the Workspace Sometimes it might be useful loading the model's configuration directly from the Workspace. For this purpose, a new WBToolbox.WBToolboxConfig class has been developed. The Configuration block needs to know only the name of the variable which refers to the object. Its data is then read before the simulation runs. This snippet of code shows an example of how to initialize a configuration object: # Initialize a config object WBTConfigRobot = WBToolbox . WBToolboxConfig ; # Insert robot data WBTConfigRobot . RobotName = icubSim ; WBTConfigRobot . UrdfFile = model.urdf ; WBTConfigRobot . ControlledJoints = { ... torso_pitch , torso_roll , torso_yaw , ... r_shoulder_pitch , r_shoulder_roll , r_shoulder_yaw , r_elbow , ... l_shoulder_pitch , l_shoulder_roll , l_shoulder_yaw , l_elbow }; WBTConfigRobot . ControlBoardsNames = { torso , left_arm , right_arm }; WBTConfigRobot . LocalName = WBT ; To check if the data has been read correctly, it is displayed as read-only in the block's mask. Furthermore, a good sign for a valid configuration is the WBTConfigRobot.ValidConfiguration property. Multi-robot support The scope of the introduction of the Configuration block goes beyond the need of a simpler toolbox configuration. One of the biggest limitation of the 2.0 version is the support of controlling only one robot per model . WB-Toolbox 3.0 is now capable of reading / sending data from / to multiple robots. Multiple Configuration blocks can be present in the same model attaining to the following rules: In the same hierarchical level of a Simulink model, only one Configuration block should be present. In other words, you should never see in the display more than one Configuration block. Configuration blocks put deeper in the hierarchy (e.g. in a Subsystem) override the previous ones. There are a few pitfalls which are worth to be highlighted: It is legit having two Subsystems with different Configuration blocks which point to the same robot. They can have for instance a different joint list and use different control boards. Although, despite reading information never creates problems, sending data to the robot in such scenario can be disastrous. In fact, consider the case these two subsystems share one link, and configure it in two different control modes (e.g. Position and Torque). Sending references to this link causes unpredictable effects. In line of theory it would be possible to have two subsystems in which the first one refers to a Gazebo model and the second one to a real robot. However, this case causes unpredictable behaviour for what concerns the synchronization. In fact, two different blocks for such aim are present in the toolbox: Simulator Synchronizer and Real Time Syncronizer . They should be always used exclusively. Other manual edits All the Get Estimate blocks need to be replaced by the new Get Measurement block. All the hardcoded digital filters (e.g. for the joints velocities) have been removed. A new Discrete Filter block has been developed, and it should be manually added if the read raw signal (e.g. from the Get Measurement block) requires filtering. The C++ class used by the DoFs Converter changed. All the blocks in the YARP To WBI configuration need to be connected again. The gravity vector is stored is the WBToolboxConfig class. If an alternative value is needed, set it globally directly in the configuration object or scope the block which needs it in a Subsystem with its own Configuration block. In order to set the low level PIDs, loading in the Workspace a WBToolbox.WBTPIDConfig object should be configured as follows: # Initialize an empty object pids = WBToolbox . WBTPIDConfig ; # Insert data pids . addPID ( WBToolbox . PID ( l_elbow , WBToolbox . PID ( 1 , 1 , 0 ))); pids . addPID ( WBToolbox . PID ( l_wrist_pitch , WBToolbox . PID ( 1.5 , 0 , 0.1 ))); pids . addPID ( WBToolbox . PID ( r_shoulder_pitch , WBToolbox . PID ( 0.2 , 0 , 0 ))); pids . addPID ( WBToolbox . PID ( torso_roll , WBToolbox . PID ( 0.1 , 0.1 , 0 ))); If some of the controlled joints are not specified, the PIDs are kept in their default values. Deprecations Inverse Kinematics and Remote Inverse Kinematics have been temporary deprecated. They will see a major release in the coming months. If you need them please do not upgrade to the 3.0 version. Set Low Level PID block lost the capability of switching between multiple configurations. Since they were stored in an external file, this change is aligned to the simplification process chosen for for the configuration.","title":"From WB-Toolbox 2.0"},{"location":"Migration_from_WB-Toolbox_2.0/#from-wb-toolbox-20-to-wb-toolbox-3","text":"Most of the major changes delivered with the 3.0 version of the WB-Toolbox don't affect directly the end-user. Under the hood the toolbox had an important polishing, and the small manual intervention required by this new release match the new features which have been developed. You can read Release Notes for a detailed overview. Below are described only the steps required to port Simulink models to this new release.","title":"From WB-Toolbox 2.0 to WB-Toolbox 3.*"},{"location":"Migration_from_WB-Toolbox_2.0/#new-toolbox-configuration","text":"The WB-Toolbox 2.0 was based on top of yarpWholeBodyInterface , which configuration was stored in a yarpWholeBodyInterface.ini file. This file was retrieved by ResourceFinder and its information was then loaded into the toolbox.","title":"New toolbox configuration"},{"location":"Migration_from_WB-Toolbox_2.0/#store-the-configuration-in-the-simulink-model","text":"WB-Toolbox 3.0 deprecated the support of yarpWholeBodyInterface , and for reducing the complexity and sparsity of the information storage it allows configuring a Simulink model from the model itself. The new Configuration block allows inserting information such as Robot Name , URDF Name , Controlled Joints , ... directly from the block's mask.","title":"Store the configuration in the Simulink model"},{"location":"Migration_from_WB-Toolbox_2.0/#load-the-configuration-from-the-workspace","text":"Sometimes it might be useful loading the model's configuration directly from the Workspace. For this purpose, a new WBToolbox.WBToolboxConfig class has been developed. The Configuration block needs to know only the name of the variable which refers to the object. Its data is then read before the simulation runs. This snippet of code shows an example of how to initialize a configuration object: # Initialize a config object WBTConfigRobot = WBToolbox . WBToolboxConfig ; # Insert robot data WBTConfigRobot . RobotName = icubSim ; WBTConfigRobot . UrdfFile = model.urdf ; WBTConfigRobot . ControlledJoints = { ... torso_pitch , torso_roll , torso_yaw , ... r_shoulder_pitch , r_shoulder_roll , r_shoulder_yaw , r_elbow , ... l_shoulder_pitch , l_shoulder_roll , l_shoulder_yaw , l_elbow }; WBTConfigRobot . ControlBoardsNames = { torso , left_arm , right_arm }; WBTConfigRobot . LocalName = WBT ; To check if the data has been read correctly, it is displayed as read-only in the block's mask. Furthermore, a good sign for a valid configuration is the WBTConfigRobot.ValidConfiguration property.","title":"Load the configuration from the Workspace"},{"location":"Migration_from_WB-Toolbox_2.0/#multi-robot-support","text":"The scope of the introduction of the Configuration block goes beyond the need of a simpler toolbox configuration. One of the biggest limitation of the 2.0 version is the support of controlling only one robot per model . WB-Toolbox 3.0 is now capable of reading / sending data from / to multiple robots. Multiple Configuration blocks can be present in the same model attaining to the following rules: In the same hierarchical level of a Simulink model, only one Configuration block should be present. In other words, you should never see in the display more than one Configuration block. Configuration blocks put deeper in the hierarchy (e.g. in a Subsystem) override the previous ones. There are a few pitfalls which are worth to be highlighted: It is legit having two Subsystems with different Configuration blocks which point to the same robot. They can have for instance a different joint list and use different control boards. Although, despite reading information never creates problems, sending data to the robot in such scenario can be disastrous. In fact, consider the case these two subsystems share one link, and configure it in two different control modes (e.g. Position and Torque). Sending references to this link causes unpredictable effects. In line of theory it would be possible to have two subsystems in which the first one refers to a Gazebo model and the second one to a real robot. However, this case causes unpredictable behaviour for what concerns the synchronization. In fact, two different blocks for such aim are present in the toolbox: Simulator Synchronizer and Real Time Syncronizer . They should be always used exclusively.","title":"Multi-robot support"},{"location":"Migration_from_WB-Toolbox_2.0/#other-manual-edits","text":"All the Get Estimate blocks need to be replaced by the new Get Measurement block. All the hardcoded digital filters (e.g. for the joints velocities) have been removed. A new Discrete Filter block has been developed, and it should be manually added if the read raw signal (e.g. from the Get Measurement block) requires filtering. The C++ class used by the DoFs Converter changed. All the blocks in the YARP To WBI configuration need to be connected again. The gravity vector is stored is the WBToolboxConfig class. If an alternative value is needed, set it globally directly in the configuration object or scope the block which needs it in a Subsystem with its own Configuration block. In order to set the low level PIDs, loading in the Workspace a WBToolbox.WBTPIDConfig object should be configured as follows: # Initialize an empty object pids = WBToolbox . WBTPIDConfig ; # Insert data pids . addPID ( WBToolbox . PID ( l_elbow , WBToolbox . PID ( 1 , 1 , 0 ))); pids . addPID ( WBToolbox . PID ( l_wrist_pitch , WBToolbox . PID ( 1.5 , 0 , 0.1 ))); pids . addPID ( WBToolbox . PID ( r_shoulder_pitch , WBToolbox . PID ( 0.2 , 0 , 0 ))); pids . addPID ( WBToolbox . PID ( torso_roll , WBToolbox . PID ( 0.1 , 0.1 , 0 ))); If some of the controlled joints are not specified, the PIDs are kept in their default values.","title":"Other manual edits"},{"location":"Migration_from_WB-Toolbox_2.0/#deprecations","text":"Inverse Kinematics and Remote Inverse Kinematics have been temporary deprecated. They will see a major release in the coming months. If you need them please do not upgrade to the 3.0 version. Set Low Level PID block lost the capability of switching between multiple configurations. Since they were stored in an external file, this change is aligned to the simplification process chosen for for the configuration.","title":"Deprecations"},{"location":"Migration_from_WBI-Toolbox_1.0/","text":"From WBI-Toolbox to WB-Toolbox 2.* Given a simulink model with some WBI-Toolbox blocks inside, the general procedure is to substitute each block with the corresponding one from WB-Toolbox 2.0 . However, there are some things the user should take care while doing this operation. This guide points out the main differences between the two toolboxes. For more information about the WBI-Toolbox, please have a look at the WBI-Toolbox README . This guide follows the WBI and WB Toolbox blocks partitioning in Simulink library. It is divided in the following sections: Required variables Utilities wholeBodyActuators wholeBodyModel wholeBodyStates Required variables As explained in the WB-Toolbox README , first of all the user should define the following variables: - WBT_modelName - WBT_wbiList - WBT_wbiFilename - WBT_robotName They have already meaningful default values. Nevertheless you should take a look at at least the following two variables: - WBT_modelname = 'matlabTorqueBalancing' or be careful that the default name does not conflicts with any other modules or YARP ports - WBT_wbiList = 'ROBOT_TORQUE_CONTROL_JOINTS_WITHOUT_PRONOSUP' if you simulate a 23-DoFs iCub robot Floating base position estimate In the WB-Toolbox the world-to-base homogeneous transformation matrix is not calculated inside each block, but it must be provided from the Simulink model as a block input. The world-to-base homogeneous transformation matrix is a 4x4 matrix that maps position and orientation of a rigid body from an initial frame of reference to another. For back-compatibility, the transformation happending under the hood in the WBI-Toolbox can be obtained using forward kinematics blocks as in the following example: where forward kinematics is used to compute the transformation matrices from world to the left foot and from world to the root link, while the desired transformation matrix is obtained as a matrices product, using the homogeneous transformation matrix properties. Utilities In this section the user should note that: - the Minimum Jerk Trajectory Generator block has now only the reference trajectory as input. The initial value is automatically taken at startup. - Yarp Read and some other blocks require now the WBT_modelName instead of the localName variable. wholeBodyActuators Instead of having different blocks for each kind of control mode, only one block is now present. The user can choose the control mode by double-clicking on it and selecting one of the possible modes (position, position direct, velocity and torques) wholeBodyModel It is divided into three subsections. The Joint Limits block is now moved into wholeBodyStates section. Dynamics the dJdq blocks have been moved into jacobians subsection; for mass matrix, generalized bias forces and centroidal momentum computation is now required to calculate explicitly the world-to-base homogeneous transformation matrix and the base velocity. Furthermore, the base frame pose and velocity and the joint configuration are now separate inputs. Jacobians There is now only one generic block for jacobians and one for dJdq calculation. The link with respect to which the Jacobian is computed is determined by its frame name as specified in the URDF model . As for the dynamics, the base pose and velocity and the joint position and velocity are required as input. Kinematics As for the section Jacobians , there is now only one generic block for forward kinematics computation. World-to-base homogeneous transformation matrix and joint position are the required input. wholeBodyStates As in the previous section, one generic block is used, from which the user can estimate joint position, velocity and acceleration and joint torques. The Joint Limits block is moved into this section.","title":"From WBI-Toolbox"},{"location":"Migration_from_WBI-Toolbox_1.0/#from-wbi-toolbox-to-wb-toolbox-2","text":"Given a simulink model with some WBI-Toolbox blocks inside, the general procedure is to substitute each block with the corresponding one from WB-Toolbox 2.0 . However, there are some things the user should take care while doing this operation. This guide points out the main differences between the two toolboxes. For more information about the WBI-Toolbox, please have a look at the WBI-Toolbox README . This guide follows the WBI and WB Toolbox blocks partitioning in Simulink library. It is divided in the following sections: Required variables Utilities wholeBodyActuators wholeBodyModel wholeBodyStates","title":"From WBI-Toolbox to WB-Toolbox 2.*"},{"location":"Migration_from_WBI-Toolbox_1.0/#required-variables","text":"As explained in the WB-Toolbox README , first of all the user should define the following variables: - WBT_modelName - WBT_wbiList - WBT_wbiFilename - WBT_robotName They have already meaningful default values. Nevertheless you should take a look at at least the following two variables: - WBT_modelname = 'matlabTorqueBalancing' or be careful that the default name does not conflicts with any other modules or YARP ports - WBT_wbiList = 'ROBOT_TORQUE_CONTROL_JOINTS_WITHOUT_PRONOSUP' if you simulate a 23-DoFs iCub robot","title":"Required variables"},{"location":"Migration_from_WBI-Toolbox_1.0/#floating-base-position-estimate","text":"In the WB-Toolbox the world-to-base homogeneous transformation matrix is not calculated inside each block, but it must be provided from the Simulink model as a block input. The world-to-base homogeneous transformation matrix is a 4x4 matrix that maps position and orientation of a rigid body from an initial frame of reference to another. For back-compatibility, the transformation happending under the hood in the WBI-Toolbox can be obtained using forward kinematics blocks as in the following example: where forward kinematics is used to compute the transformation matrices from world to the left foot and from world to the root link, while the desired transformation matrix is obtained as a matrices product, using the homogeneous transformation matrix properties.","title":"Floating base position estimate"},{"location":"Migration_from_WBI-Toolbox_1.0/#utilities","text":"In this section the user should note that: - the Minimum Jerk Trajectory Generator block has now only the reference trajectory as input. The initial value is automatically taken at startup. - Yarp Read and some other blocks require now the WBT_modelName instead of the localName variable.","title":"Utilities"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodyactuators","text":"Instead of having different blocks for each kind of control mode, only one block is now present. The user can choose the control mode by double-clicking on it and selecting one of the possible modes (position, position direct, velocity and torques)","title":"wholeBodyActuators"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodymodel","text":"It is divided into three subsections. The Joint Limits block is now moved into wholeBodyStates section.","title":"wholeBodyModel"},{"location":"Migration_from_WBI-Toolbox_1.0/#dynamics","text":"the dJdq blocks have been moved into jacobians subsection; for mass matrix, generalized bias forces and centroidal momentum computation is now required to calculate explicitly the world-to-base homogeneous transformation matrix and the base velocity. Furthermore, the base frame pose and velocity and the joint configuration are now separate inputs.","title":"Dynamics"},{"location":"Migration_from_WBI-Toolbox_1.0/#jacobians","text":"There is now only one generic block for jacobians and one for dJdq calculation. The link with respect to which the Jacobian is computed is determined by its frame name as specified in the URDF model . As for the dynamics, the base pose and velocity and the joint position and velocity are required as input.","title":"Jacobians"},{"location":"Migration_from_WBI-Toolbox_1.0/#kinematics","text":"As for the section Jacobians , there is now only one generic block for forward kinematics computation. World-to-base homogeneous transformation matrix and joint position are the required input.","title":"Kinematics"},{"location":"Migration_from_WBI-Toolbox_1.0/#wholebodystates","text":"As in the previous section, one generic block is used, from which the user can estimate joint position, velocity and acceleration and joint torques. The Joint Limits block is moved into this section.","title":"wholeBodyStates"},{"location":"about/","text":"WB-Toolbox has been developed in the Dynamic Interaction Control research line at the Italian Institute of Technology . It was born from the ashes of robotology-playground/WBI-Toolbox . It is used extensively for controllers stored in robotology-playground/whole-body-controllers . Maintainer Ferigo Diego ( @diegoferigo ) Contributors In alphabetical order: Eljaik Jorhabib ( @jeljaik ) Ferigo Diego ( @diegoferigo ) Nori Francesco ( @iron76 ) Pucci Daniele ( @DanielePucci ) Romano Francesco ( @francesco-romano ) Traversaro Silvio ( @traversaro ) Acknowledgments The development of WB-Toolbox is supported by: FP7 EU projects CoDyCo (No. 600716 ICT 2011.2.1 Cognitive Systems and Robotics) H2020 EU projects AnDy (No. 731540 H2020-ICT-2016-1)","title":"About"},{"location":"about/#maintainer","text":"Ferigo Diego ( @diegoferigo )","title":"Maintainer"},{"location":"about/#contributors","text":"In alphabetical order: Eljaik Jorhabib ( @jeljaik ) Ferigo Diego ( @diegoferigo ) Nori Francesco ( @iron76 ) Pucci Daniele ( @DanielePucci ) Romano Francesco ( @francesco-romano ) Traversaro Silvio ( @traversaro )","title":"Contributors"},{"location":"about/#acknowledgments","text":"The development of WB-Toolbox is supported by: FP7 EU projects CoDyCo (No. 600716 ICT 2011.2.1 Cognitive Systems and Robotics) H2020 EU projects AnDy (No. 731540 H2020-ICT-2016-1)","title":"Acknowledgments"},{"location":"create_new_block/","text":"Warning These information are outdated. The need to be ported to WB-Toolbox 3 . The following steps are necessary in order to add additional blocks to the Library. C++ Generic Block Inherit from Block class Implement the numberOfParameters() function returning the number of parameters your block takes If the parameter is tunable (i.e. it can be changed during the simulation) implement parameterAtIndexIsTunable : by default parameters are not tunable Implement the configureSizeAndPorts method to properly set the number and type of input and output ports Implement the initialize method to perform any initialization your block requires Implement the finilize method to cleanup any resources your block requested in the initialize method Implement the output method to perform the actual operations You can access the block parameters by using the usual mex C functions. NOTE your parameters are 1-based numbered, NOT 0-based. So the first parameter is at index 1, etc... WBI-based Block If you need to implement a WBI-based block it is highly advisable that you inherit from WBIBlock class. This base class already implements a lot of functionalities and it is highly probable you need to just implement the output function. The WBIBlock base class already provide you the following features: The number of parameters is already set to 4 ( robot name , model name , wbi filename , wbi joint list ) and they are correctly parsed. An instance of the Yarp WholeBody interface is configured, initialized, and properly released in the finilize method. The Yarp network properly initialized and terminated. You can obtain a reference to the singleton WB Interface wrapper by calling the static method WBInterface::sharedInstance . Note Additional parameters you specify starts from the index 5 . Notes on implementation During configureSizeAndPorts you should not allocate any memory or save any data because the object will not persist after the method call. The correct place is the initialize method. Every function takes as last parameter an Error object. It can be NULL , so check before dereferencing the pointer. Final steps Independently of the type of block you implemented some more steps are required to properly add the block. CMake You can use the macro provided by this project: configure_block ( BLOCK_NAME ${ HUMAN_READABLE_DESCRIPTION } LIST_PREFIX WBT SOURCES ${ CPP_FILES } HEADERS ${ HEADER_FILES } ) where ${HUMAN_READABLE_DESCRIPTION} is a string used in the group folder (for projects which support it), ${CPP_FILES} is a list of .cpp files needed by your block ${HEADER_FILES} is a list of .h files needed by your block Block Factory Add you main header to the toolbox.h file Add the code needed for the creation of your class in factory.cpp , Block::instantiateBlockWithClassName method. The string passed as argument is the one you specify in the S-Function block in Simulink (see next section) Simulink Add an S-Function block Specify as s-function name WB-Toolbox Add the parameters: The first parameter is the name of the class, e.g. YarpRead If you are creating a WBI-based block you have to specify 4 additional parameters: robot name , model name , YarpWBI configuration file , YarpWBI Joint list Add any additional parameter required by your block Create a Subsystem and add a Mask to it Note you should use variables for the S-Function parameters and you should specify them in the mask parameters. Note you can also supply default values for the variables by adding code in the Block- Properties- Callbacks- Init You can skip most of the aforementioned steps by duplicating an already existing block. Just be sure you are duplicating it and not creating an alias.","title":"Add a new block"},{"location":"create_new_block/#c","text":"","title":"C++"},{"location":"create_new_block/#generic-block","text":"Inherit from Block class Implement the numberOfParameters() function returning the number of parameters your block takes If the parameter is tunable (i.e. it can be changed during the simulation) implement parameterAtIndexIsTunable : by default parameters are not tunable Implement the configureSizeAndPorts method to properly set the number and type of input and output ports Implement the initialize method to perform any initialization your block requires Implement the finilize method to cleanup any resources your block requested in the initialize method Implement the output method to perform the actual operations You can access the block parameters by using the usual mex C functions. NOTE your parameters are 1-based numbered, NOT 0-based. So the first parameter is at index 1, etc...","title":"Generic Block"},{"location":"create_new_block/#wbi-based-block","text":"If you need to implement a WBI-based block it is highly advisable that you inherit from WBIBlock class. This base class already implements a lot of functionalities and it is highly probable you need to just implement the output function. The WBIBlock base class already provide you the following features: The number of parameters is already set to 4 ( robot name , model name , wbi filename , wbi joint list ) and they are correctly parsed. An instance of the Yarp WholeBody interface is configured, initialized, and properly released in the finilize method. The Yarp network properly initialized and terminated. You can obtain a reference to the singleton WB Interface wrapper by calling the static method WBInterface::sharedInstance . Note Additional parameters you specify starts from the index 5 .","title":"WBI-based Block"},{"location":"create_new_block/#notes-on-implementation","text":"During configureSizeAndPorts you should not allocate any memory or save any data because the object will not persist after the method call. The correct place is the initialize method. Every function takes as last parameter an Error object. It can be NULL , so check before dereferencing the pointer.","title":"Notes on implementation"},{"location":"create_new_block/#final-steps","text":"Independently of the type of block you implemented some more steps are required to properly add the block.","title":"Final steps"},{"location":"create_new_block/#cmake","text":"You can use the macro provided by this project: configure_block ( BLOCK_NAME ${ HUMAN_READABLE_DESCRIPTION } LIST_PREFIX WBT SOURCES ${ CPP_FILES } HEADERS ${ HEADER_FILES } ) where ${HUMAN_READABLE_DESCRIPTION} is a string used in the group folder (for projects which support it), ${CPP_FILES} is a list of .cpp files needed by your block ${HEADER_FILES} is a list of .h files needed by your block","title":"CMake"},{"location":"create_new_block/#block-factory","text":"Add you main header to the toolbox.h file Add the code needed for the creation of your class in factory.cpp , Block::instantiateBlockWithClassName method. The string passed as argument is the one you specify in the S-Function block in Simulink (see next section)","title":"Block Factory"},{"location":"create_new_block/#simulink","text":"Add an S-Function block Specify as s-function name WB-Toolbox Add the parameters: The first parameter is the name of the class, e.g. YarpRead If you are creating a WBI-based block you have to specify 4 additional parameters: robot name , model name , YarpWBI configuration file , YarpWBI Joint list Add any additional parameter required by your block Create a Subsystem and add a Mask to it Note you should use variables for the S-Function parameters and you should specify them in the mask parameters. Note you can also supply default values for the variables by adding code in the Block- Properties- Callbacks- Init You can skip most of the aforementioned steps by duplicating an already existing block. Just be sure you are duplicating it and not creating an alias.","title":"Simulink"},{"location":"getting-started/","text":"Environment variables The following environment variables must be specified: YARP_ROBOT_NAME YARP_DATA_DIRS Tip: launch Matlab from the command line The environment variables stored in the .bashrc or .bash_profile files are automatically loaded. Store here additional variables if needed. Tip: launch Matlab from the desktop launcher You can store environment variables from the Matlab command line using the setenv function. Creating a model Before using or creating a new model keep in mind that WB-Toolbox is discrete in principle and your simulation should be discrete as well. By going to Simulation Configuration Parameters Solver you should change the solver options to Fixed Step and use a discrete (no continuous states) solver. In order to start dragging and dropping blocks from the WB-Toolbox , open the Simulink Library Browser and search for Whole Body Toolbox in the tree view.","title":"Getting started"},{"location":"getting-started/#environment-variables","text":"The following environment variables must be specified: YARP_ROBOT_NAME YARP_DATA_DIRS Tip: launch Matlab from the command line The environment variables stored in the .bashrc or .bash_profile files are automatically loaded. Store here additional variables if needed. Tip: launch Matlab from the desktop launcher You can store environment variables from the Matlab command line using the setenv function.","title":"Environment variables"},{"location":"getting-started/#creating-a-model","text":"Before using or creating a new model keep in mind that WB-Toolbox is discrete in principle and your simulation should be discrete as well. By going to Simulation Configuration Parameters Solver you should change the solver options to Fixed Step and use a discrete (no continuous states) solver. In order to start dragging and dropping blocks from the WB-Toolbox , open the Simulink Library Browser and search for Whole Body Toolbox in the tree view.","title":"Creating a model"},{"location":"install/","text":"Install Disclaimer WB-Toolbox has been widely tested on Ubuntu 16:04 and Matlab R2017b . If you face any issue either with your OS or Matlab version, please submit an Issue . Requirements Matlab 7.1+ and Simulink: tested with Matlab R2017b , R2016b YARP compiled as shared library (default behavior) iDynTree YCM Supported Operating Systems: Linux, macOS, Windows Optional requirements iCub (needed for some blocks) Gazebo Simulator gazebo_yarp_plugins Installation For a simplified installation procedure, jump to Install using the robotology-superbuild . Warning The following instructions are for Unix-like systems, but they work similarly on other operating systems. Dependencies Install the required and the optional dependencies by following their installation instructions. These instructions need that YARP , iDynTree and YCM packages (and optionally iCub ) can be found by CMake using find_package . Setup Matlab Make sure that you have MATLAB and Simulink properly installed and running. CMake needs to find the Matlab installation folder in order to link the sources against its libraries. Make sure that CMake is able to find your Matlab installation , or manually set the Matlab_ROOT_DIR environment variable if needed. After this, check that the MEX compiler for MATLAB is properly configured and working. You can try compiling some of the MATLAB C code examples as described in the mex official documentation . Download, build and install If all the dependencies are met, proceed with the following instructions: git clone https://github.com/robotology/wb-toolbox.git mkdir -p wb-toolbox/build cd wb-toolbox/build cmake .. -DCMAKE_INSTALL_PREFIX = install-prefix cmake --build . --config Release cmake --build . --config Release --target install Note From now on, this guide refers to your install directory with the variable install-prefix . Every time you see this variable, you should substitute the absolute install path. Configuration Matlab In order to use the WB-Toolbox in Matlab you have to add some folders to the Matlab path. If you usually launch Matlab from the command line, exporting the following environment variable should be enough: export MATLABPATH = install-prefix /mex: install-prefix /share/WBToolbox: install-prefix /share/WBToolbox/images If, instead, you use the desktop launcher, a non-persistent Matlab configuration is the following: addpath ([ install-prefix / mex ]) addpath ( genpath ([ install-prefix / share / WBToolbox ])) We also provide for the latter scenario a persistent configuration of WB-Toolbox . After the installation run once the startup_wbitoolbox.m script that you can find in the install-prefix /share/WBToolbox directory. It will place a file pathdef.m in your userpath that loads the right variables to Matlab's environment. Note that this usage assumes that Matlab is always launched from the userpath folder . Environment Each robot that can be used through WB-Toolbox has its own configuration files. WB-Toolbox uses the YARP 's ResourceFinder for finding files in the file system. You should thus follow the related instructions to properly configure your installation (e.g. setting the YARP_DATA_DIRS and YARP_ROBOT_NAME variables). Install using the robotology-superbuild The robotology/robotology-superbuild provides an easy way for users to setup an environment by downloading, compiling, installing all the projects together. Follow the superbuild installation instructions and enable the ROBOTOLOGY_ENABLE_DYNAMICS profile. If WB-Toolbox is not downloaded and built, check that the ROBOTOLOGY_USES_MATLAB is ON and the ROBOTOLOGY_NOT_USE_SIMULINK is OFF . The configuration should be straightforward following the Configure your environment and Matlab sections.","title":"Install"},{"location":"install/#install","text":"Disclaimer WB-Toolbox has been widely tested on Ubuntu 16:04 and Matlab R2017b . If you face any issue either with your OS or Matlab version, please submit an Issue .","title":"Install"},{"location":"install/#requirements","text":"Matlab 7.1+ and Simulink: tested with Matlab R2017b , R2016b YARP compiled as shared library (default behavior) iDynTree YCM Supported Operating Systems: Linux, macOS, Windows","title":"Requirements"},{"location":"install/#optional-requirements","text":"iCub (needed for some blocks) Gazebo Simulator gazebo_yarp_plugins","title":"Optional requirements"},{"location":"install/#installation","text":"For a simplified installation procedure, jump to Install using the robotology-superbuild . Warning The following instructions are for Unix-like systems, but they work similarly on other operating systems.","title":"Installation"},{"location":"install/#dependencies","text":"Install the required and the optional dependencies by following their installation instructions. These instructions need that YARP , iDynTree and YCM packages (and optionally iCub ) can be found by CMake using find_package .","title":"Dependencies"},{"location":"install/#setup-matlab","text":"Make sure that you have MATLAB and Simulink properly installed and running. CMake needs to find the Matlab installation folder in order to link the sources against its libraries. Make sure that CMake is able to find your Matlab installation , or manually set the Matlab_ROOT_DIR environment variable if needed. After this, check that the MEX compiler for MATLAB is properly configured and working. You can try compiling some of the MATLAB C code examples as described in the mex official documentation .","title":"Setup Matlab"},{"location":"install/#download-build-and-install","text":"If all the dependencies are met, proceed with the following instructions: git clone https://github.com/robotology/wb-toolbox.git mkdir -p wb-toolbox/build cd wb-toolbox/build cmake .. -DCMAKE_INSTALL_PREFIX = install-prefix cmake --build . --config Release cmake --build . --config Release --target install Note From now on, this guide refers to your install directory with the variable install-prefix . Every time you see this variable, you should substitute the absolute install path.","title":"Download, build and install"},{"location":"install/#configuration","text":"","title":"Configuration"},{"location":"install/#matlab","text":"In order to use the WB-Toolbox in Matlab you have to add some folders to the Matlab path. If you usually launch Matlab from the command line, exporting the following environment variable should be enough: export MATLABPATH = install-prefix /mex: install-prefix /share/WBToolbox: install-prefix /share/WBToolbox/images If, instead, you use the desktop launcher, a non-persistent Matlab configuration is the following: addpath ([ install-prefix / mex ]) addpath ( genpath ([ install-prefix / share / WBToolbox ])) We also provide for the latter scenario a persistent configuration of WB-Toolbox . After the installation run once the startup_wbitoolbox.m script that you can find in the install-prefix /share/WBToolbox directory. It will place a file pathdef.m in your userpath that loads the right variables to Matlab's environment. Note that this usage assumes that Matlab is always launched from the userpath folder .","title":"Matlab"},{"location":"install/#environment","text":"Each robot that can be used through WB-Toolbox has its own configuration files. WB-Toolbox uses the YARP 's ResourceFinder for finding files in the file system. You should thus follow the related instructions to properly configure your installation (e.g. setting the YARP_DATA_DIRS and YARP_ROBOT_NAME variables).","title":"Environment"},{"location":"install/#install-using-the-robotology-superbuild","text":"The robotology/robotology-superbuild provides an easy way for users to setup an environment by downloading, compiling, installing all the projects together. Follow the superbuild installation instructions and enable the ROBOTOLOGY_ENABLE_DYNAMICS profile. If WB-Toolbox is not downloaded and built, check that the ROBOTOLOGY_USES_MATLAB is ON and the ROBOTOLOGY_NOT_USE_SIMULINK is OFF . The configuration should be straightforward following the Configure your environment and Matlab sections.","title":"Install using the robotology-superbuild"},{"location":"license/","text":"LGPL v2.1 or any later version Copyright (C) 2018 Istituto Italiano di Tecnologia - iCub Facility This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA","title":"License"},{"location":"license/#lgpl-v21-or-any-later-version","text":"Copyright (C) 2018 Istituto Italiano di Tecnologia - iCub Facility This library is free software; you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation; either version 2.1 of the License, or (at your option) any later version. This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details. You should have received a copy of the GNU Lesser General Public License along with this library; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA","title":"LGPL v2.1 or any later version"},{"location":"sim_tricks/","text":"This page contains some tricks (or not so obvious features) needed for creating Blocks in simulink Use of popup mask parameters If you need to use a popup mask parameter (i.e. a dropdown list) in you block you should notice the following thing: If EVALUATE is set to TRUE then the variable associated with the parameter will contain the INDEX (1-based) of the selection. If EVALUATE is set to FALSE then the variable associated with the parameter will contain the ACTUAL VALUE of the selection. Original source Self-modifiable blocks If you block needs to modify its options (via matlab callbacks associated with a parameter), e.g. when changing the parameters mask depending on another parameter, or when changing the number of input/outputs, be sure to check (on) the \"Mask Editor - Initialization - Allow library block to modify its contents\" Create a new block This is more heuristic than the \"correct method\", but it has been proved to work. Create a new Simulink Model and start creating the block. You can also duplicate an existing block from the Library. In this second case be sure to do the following steps: Right click on the block - Library Link - Disable Link Right click on the block - Library Link - Break Link At this point finish your work, compile the model and only at this point add the block to the library, so that its aspect will reflect the real one. Note: The step of creating the model separately is needed until we find out how to update the aspect of the block directly in the Library. Further more, this process can hinder the already existing links to the block.","title":"Simulink Tricks"},{"location":"sim_tricks/#use-of-popup-mask-parameters","text":"If you need to use a popup mask parameter (i.e. a dropdown list) in you block you should notice the following thing: If EVALUATE is set to TRUE then the variable associated with the parameter will contain the INDEX (1-based) of the selection. If EVALUATE is set to FALSE then the variable associated with the parameter will contain the ACTUAL VALUE of the selection. Original source","title":"Use of popup mask parameters"},{"location":"sim_tricks/#self-modifiable-blocks","text":"If you block needs to modify its options (via matlab callbacks associated with a parameter), e.g. when changing the parameters mask depending on another parameter, or when changing the number of input/outputs, be sure to check (on) the \"Mask Editor - Initialization - Allow library block to modify its contents\"","title":"Self-modifiable blocks"},{"location":"sim_tricks/#create-a-new-block","text":"This is more heuristic than the \"correct method\", but it has been proved to work. Create a new Simulink Model and start creating the block. You can also duplicate an existing block from the Library. In this second case be sure to do the following steps: Right click on the block - Library Link - Disable Link Right click on the block - Library Link - Break Link At this point finish your work, compile the model and only at this point add the block to the library, so that its aspect will reflect the real one.","title":"Create a new block"},{"location":"sim_tricks/#note","text":"The step of creating the model separately is needed until we find out how to update the aspect of the block directly in the Library. Further more, this process can hinder the already existing links to the block.","title":"Note:"},{"location":"troubleshooting/","text":"Problems finding libraries and libstdc++ In case Matlab has trouble finding a specific library, a workaround is to launch it preloading the variable LD_PRELOAD (or DYLD_INSERT_LIBRARIES on macOS) with the full path of the missing library. On Linux you might have trouble with libstdc++.so since Matlab comes with its own. To use your system's libstdc++ you would need to launch Matlab with: LD_PRELOAD = /usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab The current version on Ubuntu 16:04 is libstdc++.so.6 , make sure this is the case also on your OS. Tip You could additionally create an alias to launch Matlab this way: alias matlab_wbt= cd ~/Documents/MATLAB LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab Info Another solution involving the .matlab7rc.sh file can be found in codyco-superbuild#141 . YARP not installed in the system default directory In case you compiled YARP in a directory different from the system default one and you are not using RPATH, you need to tell to MATLAB the location in which to find the shared libraries for YARP . If you launch MATLAB from command line, this task is already done for you by bash (if you edited .bashrc ). If you launch MATLAB from the UI (e.g. on macOS by double clicking the application icon) you need to further add the variables in ${MATLAB_ROOT}/bin/.matlab7rc.sh by first doing chmod +w .matlab7rc.sh Then looking for the variable LDPATH_SUFFIX and assign to every instance the contents of your DYLD_LIBRARY_PATH . Finally do: chmod -w .matlab7rc.sh The error message you get in this case might look something like: Library not loaded: libyarpwholeBodyinterface.0.0.1.dylib Referenced from: ${ CODYCO_SUPERBUILD_DIR } /install/mex/robotState.mexmaci64","title":"Troubleshooting"},{"location":"troubleshooting/#problems-finding-libraries-and-libstdc","text":"In case Matlab has trouble finding a specific library, a workaround is to launch it preloading the variable LD_PRELOAD (or DYLD_INSERT_LIBRARIES on macOS) with the full path of the missing library. On Linux you might have trouble with libstdc++.so since Matlab comes with its own. To use your system's libstdc++ you would need to launch Matlab with: LD_PRELOAD = /usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab The current version on Ubuntu 16:04 is libstdc++.so.6 , make sure this is the case also on your OS. Tip You could additionally create an alias to launch Matlab this way: alias matlab_wbt= cd ~/Documents/MATLAB LD_PRELOAD=/usr/lib/x86_64-linux-gnu/libstdc++.so.6 matlab Info Another solution involving the .matlab7rc.sh file can be found in codyco-superbuild#141 .","title":"Problems finding libraries and libstdc++"},{"location":"troubleshooting/#yarp-not-installed-in-the-system-default-directory","text":"In case you compiled YARP in a directory different from the system default one and you are not using RPATH, you need to tell to MATLAB the location in which to find the shared libraries for YARP . If you launch MATLAB from command line, this task is already done for you by bash (if you edited .bashrc ). If you launch MATLAB from the UI (e.g. on macOS by double clicking the application icon) you need to further add the variables in ${MATLAB_ROOT}/bin/.matlab7rc.sh by first doing chmod +w .matlab7rc.sh Then looking for the variable LDPATH_SUFFIX and assign to every instance the contents of your DYLD_LIBRARY_PATH . Finally do: chmod -w .matlab7rc.sh The error message you get in this case might look something like: Library not loaded: libyarpwholeBodyinterface.0.0.1.dylib Referenced from: ${ CODYCO_SUPERBUILD_DIR } /install/mex/robotState.mexmaci64","title":"YARP not installed in the system default directory"}]}